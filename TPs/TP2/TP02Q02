#include<stdio.h>
#include<string.h>
#include<stdlib.h>

#define MAX 200
#define MAX_LIST 11

typedef struct Show{
	char showId[MAX];
	char type[MAX];
	char title[MAX];
	char director[MAX];
    char cast[MAX_LIST][MAX];
	char country[MAX];
	char dateAdded[MAX];
	int releaseYear;
    char rating[MAX];
	char duration[MAX];
	char listedIn[MAX_LIST][MAX];	
}Show;

Show newShow();
Show *ler();
void atribuir(Show *show, char *linha);
char **separarLinha(char *linha);
char **separarLista(char *lista);
void ordenarLista(char **lista);
void imprimir(Show *show);

Show newShow(){
    Show show;
    strcpy(show.showId, "NaN");
    strcpy(show.type, "NaN");
    strcpy(show.title, "NaN");
    strcpy(show.director, "NaN");
    strcpy(show.cast[0], "NaN");
    for (int i = 1; i < MAX_LIST; i++) {
        show.cast[i][0] = '\0';
    }
    strcpy(show.country, "NaN");
    strcpy(show.dateAdded, "NaN");
    show.releaseYear = -1;
    strcpy(show.rating, "NaN");
    strcpy(show.duration, "NaN");
    strcpy(show.listedIn[0], "NaN");
    for(int i = 1; i < MAX_LIST; i++){
        show.listedIn[i][0] = '\0';
    }
    return show;
}

Show *ler(){
    Show *show = (Show*)malloc(2000 *sizeof(Show));
    FILE *arq = fopen("disneyplus.txt", "r");
    char linha[1500];
    if(arq){
        fgets(linha, sizeof(linha) , arq);
        while(fgets(linha, sizeof(linha) , arq)){
            atribuir(show, linha);
            imprimir(show);
        }
    }else{
        printf("Erro ao abrir o arquivo!");
    }
    fclose(arq);
    return show;
}

void atribuir(Show *show, char *linha){
    char **str = separarLinha(linha);
    strcpy(show->showId, str[0]);
    if(strlen(str[1]) > 0){
        strcpy(show->type, str[1]);
    }else{
        strcpy(show->type, "NaN");
    }
    if(strlen(str[2]) > 0){
        strcpy(show->title, str[2]);
    }else{
        strcpy(show->title, "NaN");
    }
    if(strlen(str[3]) > 0){
        strcpy(show->director, str[3]);
    }else{
        strcpy(show->director, "NaN");
    }
    if(strlen(str[4]) > 0){
        char **lista = separarLista(str[4]);
        for (int i = 0; i < MAX_LIST && lista[i][0] != '\0'; i++) {
            strcpy(show->cast[i], lista[i]);
        }
        
        for(int i = 0; i < MAX_LIST; i++){
            free(lista[i]);
        }
        free(lista);
    }else{
        strcpy(show->cast[0], "NaN");
        for (int i = 1; i < MAX_LIST; i++) {
            show->cast[i][0] = '\0';
        }
    }
    if(strlen(str[5]) > 0){
        strcpy(show->country, str[5]);
    }else{
        strcpy(show->country, "NaN");
    }
    if(strlen(str[6]) > 0){
        strcpy(show->dateAdded, str[6]);
    }else{
        strcpy(show->dateAdded, "NaN");
    }
    show->releaseYear = atoi(str[7]);
    if(strlen(str[8]) > 0){
        strcpy(show->rating, str[8]);
    }else{
        strcpy(show->rating, "NaN");
    }
    if(strlen(str[9]) > 0){
        strcpy(show->duration, str[9]);
    }else{
        strcpy(show->duration, "NaN");
    }
    if(strlen(str[10]) > 0){
        char **lista = separarLista(str[10]);
        for (int i = 0; i < MAX_LIST && lista[i][0] != '\0'; i++) {
            strcpy(show->listedIn[i], lista[i]);
        }
        
        for(int i = 0; i < MAX_LIST; i++){
            free(lista[i]);
        }
        free(lista);
    }else{
        strcpy(show->listedIn[0], "NaN");
        for (int i = 1; i < MAX_LIST; i++) {
            show->listedIn[i][0] = '\0';
        }
    }
    for (int i = 0; i < MAX_LIST; i++) {
        free(str[i]);
    }
    free(str);
}

char **separarLista(char *lista){
    char **str = (char**)malloc(MAX_LIST * sizeof(char*));
    for (int k = 0; k < MAX_LIST; k++) {
        str[k] = (char*)malloc((MAX + 1) * sizeof(char));
        str[k][0] = '\0';
    }
    
    int i = 0, j = 0, pos = 0;
    while(lista[i] != '\0'){
        if(lista[i] != ','){
            str[pos][j] = lista[i];
            j++;
        }else{
            str[pos][j] = '\0';
            pos++;
            j = 0;
            if(lista[i+1] == ' '){ // para pular o espaÃ§o
                i++;
            }
        }
        i++;
    }
    str[pos][j] = '\0';
    ordenarLista(str);
    return str;
}

void imprimir(Show *show){
    int i = 0;
    printf("=> %s ## ", show->showId);
    printf("%s ## ", show->title);
    printf("%s ## ", show->type);
    printf("%s ## ", show->director);
    printf("[");
    while(show->cast[i][0] != '\0'){
        printf("%s", show->cast[i]);
        if(show->cast[i+1][0] != '\0'){
            printf(", ");
        }
        i++;
    }
    printf("] ## ");
    printf("%s ## ", show->country);
    printf("%s ## ", show->dateAdded);
    printf("%d ## ", show->releaseYear);
    printf("%s ## ", show->rating);
    printf("%s ## ", show->duration);
    printf("[");
    i = 0;
    while(show->listedIn[i][0] != '\0'){
        printf("%s", show->listedIn[i]);
        if(show->listedIn[i+1][0] != '\0'){
            printf(", ");
        }
        i++;
    }
    printf("] ##");
    printf("\n");
}

void ordenarLista(char **lista){
    char temp[MAX];
    int tam = 0;
    while(lista[tam][0] != '\0'){
        tam++;
    }
    tam--;
    for(int i = tam; i > 0; i--){
        for(int j = 0; j < i; j++){
            if(strcmp(lista[j], lista[j+1]) > 0){
                strcpy(temp, lista[j]);
                strcpy(lista[j], lista[j+1]);
                strcpy(lista[j+1], temp);
            }
        }
    }
}

char **separarLinha(char *linha){
    char **str = (char**)malloc(MAX_LIST * sizeof(char*));
    for (int k = 0; k < MAX_LIST; k++) {
        str[k] = (char*)malloc((MAX + 1) * sizeof(char));
        str[k][0] = '\0';
    }
    
    int aux = 0, i = 0, j = 0;
    while(i < strlen(linha) && aux < 11){
        char letra = linha[i];
        char letra2;
        if(i+1 < strlen(linha)){
            letra2 = linha[i+1];
        }
        if(letra == ',' && letra2 != ' '){
            str[aux][j] = '\0';
            aux++;
            j = 0;
        }else{
            if(letra != '"'){
                str[aux][j] = letra;
                j++;
            }else{
                i++;
                letra = linha[i];
                while(i < strlen(linha) && linha[i] != '"'){
                    str[aux][j] = letra;
                    j++;
                    i++;
                    letra = linha[i];
                }
            }
        }
        i++;
    }
    if (j > 0 && aux < MAX_LIST) {
        str[aux][j] = '\0';
    }
    return str;
}

int main(){
    Show *show = ler();
	return 0;
}    
